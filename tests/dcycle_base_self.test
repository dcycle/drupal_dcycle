<?php

/**
 * @file
 * Test the functionality of the base test. The base test contains
 * functions developers may use as a base for their own simpletests.
 */

// grab the base test.
module_load_include('test', 'dcycle', 'tests/dcycle_base');

// don't explode the test screen if dcycle is disabled.
if (!module_exists('dcycle')) {
  drupal_set_message(t('Some tests are not shown because dcycle is not enabled'), 'warning', FALSE);
  return;
}

/**
 * Test case for testing the base test class.
 */
class dcycleTestBaseSelfTestCase extends dcycleTestBase {
  /**
   * Overrides getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'dcycle test base functionality',
      'description' => 'Test dcycle test base functionality.',
      'group' => 'dcycle',
    );
  }

  /**
   * Perform tests to see if the base methods work as expected.
   *
   * Because this method starts with the lowercase test..., it will
   * be run.
   */
  public function testSelf() {
    // create a few users to see of the user stack works. The user stack is
    // used when you have one user, and need to do the equivalent of asking
    // another user with different permissions to do something, then come
    // back to your user. See below for an example.
    $accounts = array(
      $this->drupalCreateUser(),
      $this->drupalCreateUser(),
    );

    $this->assertTrue($this->getUserStack() == array(), 'If no user has yet been remembered, the user stack is an array.');
    $this->assertTrue($this->loggedInUser == FALSE, 'No logged in user yet.');
    $this->returnToUser();
    $this->assertTrue($this->loggedInUser == FALSE, 'If impossible to remember the previous user, log out.');
    $this->drupalLogin($accounts[0]);
    $this->rememberUser();
    $this->drupalLogout();
    $this->rememberUser();
    $this->drupalLogin($accounts[1]);
    $this->rememberUser();
    $this->assertTrue($this->getUserStack() == array($accounts[0], FALSE, $accounts[1]), 'Our user stack now contains three users including an anonymous user represented by FALSE.');
    $this->drupalLogin($this->drupalCreateUser());
    $this->returnToUser();
    $this->assertTrue($this->loggedInUser == $accounts[1], 'Remembering user returns to our account #1');
    $this->returnToUser();
    $this->assertTrue($this->loggedInUser == FALSE, 'Remembering user returns to the anonymous user');
    $this->returnToUser();
    $this->assertTrue($this->loggedInUser == $accounts[0], 'Remembering user returns to our user #0');
  }

}

/**
 * Test case for making sure the test screen does not explode if dcycle absent.
 */
class dcycleNoDcycleModuleTestCase extends dcycleTestBase {
  /**
   * Overrides setUp().
   */
  public function setUp() {
    parent::setUp('simpletest');
  }

  /**
   * Overrides getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'dcycle not present on test screen',
      'description' => 'Make sure admin/config/development/testing does not explode but gives an error message if dcycle is not enabled.',
      'group' => 'dcycle',
    );
  }

  /**
   * Tests that the test screen does not explode if dcycle absent.
   *
   * Because this method starts with the lowercase test..., it will
   * be run.
   */
  public function testCase() {
    $this->loginAdmin();
    $this->drupalGet('admin/config/development/testing');
    $this->assertText('Some tests are not shown because dcycle is not enabled', 'Rather than exploding, inform user that dcycle is not present');
    $this->assertNoText('Test dcycle test base functionality.', 'Test cannot be displayed because it requires dcycle to be active for its parent class declaration');
  }

}

/**
 * Test case for making sure tests show up if dcycle present.
 */
class dcycleTestSubclassesTestCase extends dcycleTestBase {
  /**
   * Overrides setUp().
   */
  public function setUp() {
    parent::setUp('simpletest', 'dcycle');
  }

  /**
   * Overrides getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'dcycle present on test screen',
      'description' => 'Make sure admin/config/development/testing works normally if dcycle is enabled.',
      'group' => 'dcycle',
    );
  }

  /**
   * Makes sure our tests show up on the test screen if dcycle present.
   *
   * Because this method starts with the lowercase test..., it will
   * be run.
   */
  public function testCase() {
    $this->loginAdmin();
    $this->drupalGet('admin/config/development/testing');
    $this->assertNoText('Some tests are not shown because dcycle is not enabled', 'dcycle now enabled, the warning should not appear');
    $this->assertText('Test dcycle test base functionality.', 'Our test can be visible because dcycle is now enabled');
  }

}
