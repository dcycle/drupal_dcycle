<?php

/**
 * @file
 * Simpletests for dcycle
 */

/**
 * Make sure we don't explode if dcycle is not present.
 */
module_load_include('test', 'dcycle', 'tests/dcycle_base');
if (!module_exists('dcycle')) {
  drupal_set_message(t('Some tests are not shown because dcycle is not enabled'), 'warning', FALSE);
  return;
}

/**
 * Test that dcycle works as expected.
 */
class dcycleTestCase extends dcycleTestBase {
  /**
   * Overrides setUp().
   */
  public function setUp() {
    parent::setUp('dcycle');
    // Use our mock object for dealing with stuff like the filesystem.
    dcycle_mockable_set_type('mock');
  }

  /**
   * Overrides getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'dcycle functionality',
      'description' => 'Test dcycle functionality.',
      'group' => 'dcycle',
    );
  }

  /**
   * Test the API.
   *
   * Because this function starts with test..., it is called.
   */
  public function testApi() {
    $expected = $this->randomName();
    dcycle_mockable_set('dcycle', 'dcycleMockableShell', 'dcycleMockShell', 'setDrush', $expected);
    $this->assertMockEquals('shell_exec', 'which drush', array($expected));
  }

  /**
   * Test the admin screen.
   *
   * Because this function starts with test..., it is called.
   */
  public function testDcycle() {
    $this->loginAdmin();
    $edit = array(
      'dcycle_policy' => 'dcycle:dcycleQuickstartPolicy',
      'dcycle_environment_type' => 'dev',
      'dcycle_project_type' => 'website',
    );
    $this->drupalPost('admin/config/development/dcycle', $edit, 'Save configuration');
    $this->assertNoText('Your deployment module is');
    $this->assertText('Please create and enable a deployment module');
    dcycle_mockable_set('dcycle', 'dcycleMockableModules', 'dcycleMockModules', 'addModule', array(
      'machine' => 'human',
    ));
    $this->drupalGet('admin/config/development/dcycle');
    $this->assertText('Your deployment module is');
    $this->assertNoText('Please create and enable a deployment module');
  }

}
