<?php

/**
 * @file
 * Functions used during Dcycle development.
 * See the README.txt file
 */

interface DcycleLog {
  public function log($text, $vars = array());
  public function error($text, $vars = array());
}

function dcycle_test($module, $log) {
  if (!$module) {
    return $log->error('Please specify a module');
  }

  module_enable(array($module));

  if (!module_exists($module)) {
    return $log->error('Module @module cannot be activated', array('@module' => $module));
  }

  if (!module_load_include('inc', $module, $module . '.dcycle')) {
    return $log->error('Module @module does not have a @module.dcycle.inc file', array('@module' => $module));
  }

  $function = $module . '_dcycle_test';
  if (!function_exists($function)) {
    return $log->error('Function @function is not defined in the @module.dcycle.inc file', array('@function' => $function, '@module' => $module));
  }

  $info = $function();

  foreach ($info['dependencies'] as $module => $module_info) {
    module_enable(array($module));
  
    if (!module_exists($module)) {
      return $log->error('Module @module cannot be activated', array('@module' => $module));
    }
  }

  foreach ($info['commands'] as $command_group_name => $command_info) {
    $log->log('Running command @group', array('@group' => $command_group_name));
    if (is_array($command_info['commands'])) {
      foreach ($command_info['commands'] as $command) {
        $fail_patterns = array('/\[error\]/');
        if (is_array($command_info['fail']['grep'])) {
          $fail_patterns = array_merge($fail_patterns, $command_info['fail']['grep']);
        }
        
        $output = array();
        $return = NULL;
        exec($command, $output, $return);

        /**
         * In certain cases, the command returns an error but exec's
         * return, the output and the $return var are empty. For example,
         * this might happen if you call drush coder-review xyz and coder
         * is not active.
         */
        if (!count($output) && !(isset($command_info['expect-no-response']))) {
          return $log->error('The call to @command expected a response, but received none from exec()', array('@command' => $command));
        }
        
        foreach ($output as $line) {
          $log->log($line);
          foreach ($fail_patterns as $fail_pattern) {
            if (preg_match($fail_pattern, $line)) {
              $fail = array(
                'pattern' => $fail_pattern,
                'line' => $line,
              );
              return $log->error('Pattern @p detected in @l', array('@p' => $fail_pattern, '@l' => $line));
            }
            else {
            }
          }
        }
      }
    }
  }
}
