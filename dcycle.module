<?php

/**
 * @file
 * Functions used during Dcycle development.
 * See the README.txt file
 */

interface DcycleLog {
  public function log($text, $vars = array());
  public function error($text, $vars = array());
}

/**
 * Run tests on a given module.
 *
 * The module must exist and have a [module].dycle.inc file which defines
 * what should be tested and what constitutes a failure.
 *
 * @param $module
 *   The module name.
 *
 * @log
 *   A log object, for example DcycleDrushLog if this function is called from
 *   drush. If you call this outside of Drush, another log object which
 *   implements the DcycleLog interface must be defined.
 */
function dcycle_test($module, $log) {
  if (!$module) {
    return $log->error('Please specify a module');
  }

  module_enable(array($module));

  if (!module_exists($module)) {
    return $log->error('Module @module cannot be activated', array('@module' => $module));
  }

  if (!module_load_include('inc', $module, $module . '.dcycle')) {
    return $log->error('Module @module does not have a @module.dcycle.inc file', array('@module' => $module));
  }

  $function = $module . '_dcycle_test';
  if (!function_exists($function)) {
    return $log->error('Function @function is not defined in the @module.dcycle.inc file', array('@function' => $function, '@module' => $module));
  }

  $info = $function();

  dcycle_check_dependencies($module, $info, $log);

  foreach ($info['commands'] as $command_group_name => $command_info) {
    $log->log('Running command @group', array('@group' => $command_group_name));
    if (is_array($command_info['commands'])) {
      foreach ($command_info['commands'] as $command) {
        $fail_patterns = array('/\[error\]/');
        if (is_array($command_info['fail']['grep'])) {
          $fail_patterns = array_merge($fail_patterns, $command_info['fail']['grep']);
        }
        
        $output = array();
        $return = NULL;
        exec($command, $output, $return);

        /**
         * In certain cases, the command returns an error but exec's
         * return, the output and the $return var are empty. For example,
         * this might happen if you call drush coder-review xyz and coder
         * is not active.
         */
        if (!count($output) && !(isset($command_info['expect-no-response']))) {
          return $log->error('The call to @command expected a response, but received none from exec()', array('@command' => $command));
        }
        
        foreach ($output as $line) {
          $log->log($line);
          foreach ($fail_patterns as $fail_pattern) {
            if (preg_match($fail_pattern, $line)) {
              $fail = array(
                'pattern' => $fail_pattern,
                'line' => $line,
              );
              return $log->error('Pattern @p detected in @l', array('@p' => $fail_pattern, '@l' => $line));
            }
            else {
            }
          }
        }
      }
    }
  }
}

function dcycle_check_dependencies($module, $info, $log) {
  $dependencies = $info['dependencies'];
  $info_file_path = drupal_get_path('module', $module) . '/' . $module  . '.info';
  $infofile = drupal_parse_info_file($info_file_path);
  $info_file_dependencies = array();
  if (is_array($infofile['dependencies'])) {
    $info_file_dependencies = $infofile['dependencies'];
  }

  foreach (dcycle_check_update_hook_dependencies($module) as $install_dep) {
    if (!in_array($install_dep, $info_file_dependencies)) {
      $install_file_path = drupal_get_path('module', $module) . '/' . $module  . '.install';
      return $log->error('Module @module is referenced in @install but not in @info', array('@module' => $install_dep, '@install' => $install_file_path, '@info' => $info_file_path));
    }
  }

  foreach ($info_file_dependencies as $dependency) {
    module_enable(array($dependency));
  
    if (!module_exists($dependency)) {
      return $log->error('Module @module cannot be activated, perhaps you forgot to add it to your git repo?', array('@module' => $dependency));
    }
  }
}

/**
 * Get all dependencies enabled by module_enable() in a module's .install file.
 *
 * @param $module
 *   The machine name of your module, typically a site deployment module as
 *   described at http://dcycleproject.org/blog/44
 * @param $add_dependencies = FALSE
 *   If TRUE, all dependencies of enabled modules are also returned.
 *
 * @return
 *   An array of module machine names.
 */
function dcycle_check_update_hook_dependencies($module, $add_dependencies = FALSE) {
  $c = file_get_contents(drupal_get_path('module', $module) . '/' . $module . '.install');
  preg_match_all('/module_enable\(array\((.*)\)/', $c, $matches);
  $dependencies = array();
  foreach ($matches[1] as $match) {
     preg_match_all('/[a-zA-Z0-9_][a-zA-Z0-9_]*/', $match, $line_dependencies);
     foreach ($line_dependencies[0] as $line_dependency) {
       $dependencies[] = $line_dependency;
     }
  }
  if ($add_dependencies) {
    // Add dependencies' dependencies.
    dcycle_add_dependencies($dependencies);
  }
  return $dependencies;
}

/**
 * Given a module list, add all dependencies to the list.
 */
function dcycle_add_dependencies(&$module_list) {
  // Get all module data so we can find dependencies and sort.
  $module_data = system_rebuild_module_data();
  // Create an associative array with weights as values.
  $module_list = array_flip(array_values($module_list));
  while (list($module) = each($module_list)) {
    if (!isset($module_data[$module])) {
      // This module is not found in the filesystem, abort.
      return FALSE;
    }
    $module_list[$module] = $module_data[$module]->sort;

    // Add dependencies to the list, with a placeholder weight.
    // The new modules will be processed as the while loop continues.
    foreach (array_keys($module_data[$module]->requires) as $dependency) {
      if (!isset($module_list[$dependency])) {
        $module_list[$dependency] = 0;
      }
    }
  }
}

/**
 * Enable modules fast
 *
 * Normally in a [site deployment module](http://dcycleproject.org/blog/44),
 * teams often add dependencies piecemeal in hook_updates, like this:
 *
 * function mysite_deploy_update_7001() {
 *   module_enable(array('i18n_menu'));
 * }
 *
 * For initial deployments, one can cycle through all update hooks
 * in the install hook like this:
 *
 * function mysite_deploy_install() {
 *   for ($i = 7001; $i < 8000; $i++) {
 *   $candidate = 'mysite_deploy_update_' . $i;
 *   if (function_exists($candidate)) {
 *     $candidate();
 *   }
 * }
 *
 * This causes the initial deploy time to be very long, because module_enable
 * is called multiple times. Instead, you can make dcycle a dependency of your
 * site deployment module and use this code:
 *
 * function mysite_deploy_install() {
 *   $modules = dcycle_check_update_hook_dependencies('tremblant_deploy');
 *   dcycle_module_enable($modules);
 *   for ($i = 7001; $i < 8000; $i++) {
 *   $candidate = 'mysite_deploy_update_' . $i;
 *   if (function_exists($candidate)) {
 *     $candidate();
 *   }
 * }
 *
 * function mysite_deploy_update_7001() {
 *   dcycle_module_enable(array('i18n_menu'));
 * }
 *
 * What happens in the above code is that all the dependencies of all calls
 * to module_enable in your site deployment install file are calculated only
 * once. If the update hooks are called in the same php execution, the
 * calls to module_enable() do nothing at all.
 *
 * This code is experimental.
 */
function dcycle_module_enable($module_list, $enable_dependencies = TRUE) {
  // These are modules enabled during the current php execution run
  static $enabled_during_this_execution;
  // To start with, don't enable anything.
  $to_enable = array();
  if (!is_array($enabled_during_this_execution)) {
    $enabled_during_this_execution = array();
  }
  // For each module, first check if it already was enabled during this
  // execution run. If it already was, don't enable it again. this causes
  // a large gain in performance
  foreach ($module_list as $module) {
    if (!in_array($module, $enabled_during_this_execution)) {
      $enabled_during_this_execution[] = $module;
      $to_enable[] = $module;
    }
  }
  if (count($to_enable)) {
    module_enable($to_enable, $enable_dependencies);
  }
}
